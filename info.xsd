<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:element name="info">
	<xs:complexType>
		<xs:sequence>
		<xs:choice maxOccurs="unbounded" minOccurs="0">
			<xs:element name="ActorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Behavior information for colonists, enemies and animals.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AddTaskGroupsFromMods" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Add new task groups added by mods. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AlwaysAnimate" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Continue animating after arriving. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Animal" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Animals have less needs and inhabit barns instead of houses. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Armor" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How much incoming damage is subtracted per hit. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBeMinipet" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be a minipet (Kickstarter reward). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarryPosition" type="xs:string" default="(0.0, 0.5, 0.5)"  >
							<xs:annotation><xs:documentation>
								Relative position of carried items. [UnityEngine.Vector3, default: (0.0, 0.5, 0.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarryRotation" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative rotation of carried items. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CombatSound" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Sound to play when attacking, defaults to AttackAxe. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DeterministicLoot" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Deterministic loot to drop when killed. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Drinks" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Drink only a certain item (e.g. robots => oil barrel). Empty = all drinks. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Eats" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Eats only a certain item (e.g. robots => oil barrel). Empty = all food. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GainsExperience" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Gets better at what it does. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HealingAmount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Healing: how much is healed per cycle. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HealingInterval" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Healing: how much time between each cycle. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HealingRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Healing: range of effect. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Names" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of possible names. Use inheritsfrom:xxx to inherit names from another type (used for backer names). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Needs" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of needs (see DataInfo/Needs). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RandomLootAmount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How many pieces of loot when killed? [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Robot" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Robots are not counted as idle colonists. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Movement speed in tiles per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskGroups" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of possible tasks (see DataInfo/TaskGroup). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnarmedMeleeAttack" type="xs:string" default="5"  >
							<xs:annotation><xs:documentation>
								How much damage per punch does actor do when unarmed. [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VisionRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Vision range around this actor. Note that the vision does not persist when you reload the game. Also note that this can cause a bit of lag when used excessively. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitAfterMovement" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long is the actor idle after movement. (e.g. spiders) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BackerRaftInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A raft carrying things from other players. (only used internally)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BirdInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Birds like the seagull automatically move between Water tiles.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" default="3"  >
							<xs:annotation><xs:documentation>
								Height above ground. [System.Single, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="NextTargetMaxDistance" type="xs:string" default="30"  >
							<xs:annotation><xs:documentation>
								How far away can the next target be from the current position? [System.Int32, default: 30]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecalculationThreshold" type="xs:string" default="20"  >
							<xs:annotation><xs:documentation>
								At what distance to the next target should it be recalculated? [System.Single, default: 20]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Speed in tiles per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CombatRobotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information for combat robots.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AttackDuration" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								How long to wait after attack. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Projectile" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the projectile to use for ranged attack. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ProjectileStartPos" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Start position of the projectile. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Range" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range of the attack (0 for melee). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HitpointInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things with hitpoints can get hurt and die.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxHitpoints" type="xs:string" default="50"  >
							<xs:annotation><xs:documentation>
								HP when at full health. [System.Int32, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LeaveRaftInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A raft carrying defeated enemies away.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PopupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A popup is something that randomly appears in a time interval like the fish or the worms.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Interval" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Approximate time interval in seconds inbetween popups. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RallyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used for the rally flag
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RecruitingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used for the recruiting flag
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RobotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information for robots (still needs ActorInfo).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="StepCloudInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Spawns small particle clouds on every animation step.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OnlyWhenRunning" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Only create clouds when running. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame0" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 0. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame1" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 1. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame2" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 2. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame3" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 3. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ToolInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A tool or weapon.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="BaseEffect" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Quality level of the tool. Used to match the level of a thing to be mined or a workshop to be operated.  [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the tool (one of Crafting, Agriculture, Mining). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UserModInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information about the mod.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ModName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the mod. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Loading priority of this mod. Lower priority = loaded earlier. If your mod depends on no other mod, leave this at 0. If your mod depends on another mod, make sure your priority number is higher than the other mod's priority. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Required" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Optional: Names of required other mods. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tags" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								Tags to be attached to this item. Tags can be: Item, Animal, Gameplay, Workshop, Vehicle, Terrain, Diorama, Other, Building, Farming, Bundle [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseSubfoldersForObjects" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Use subfolders for objects. Note that if you use this option, all objects need to be in subfolder. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Version" type="xs:string" default="0,1"  >
							<xs:annotation><xs:documentation>
								Version number [System.Single, default: 0,1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UserModAuthor" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information about the author of the mod. You can have multiple of these in a file. (optional)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AuthorName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name/nickname of the author. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DiscordID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Your ID on discord (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Email" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Email of the author (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Role" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Creator, Co-Creator etc. (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SteamID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Your ID on Steam (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="VisionExtenderInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Extends vision around when built.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VisionRange" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								How many tiles far can the thing see. [System.Int32, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DecorationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A decoration object.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Range" type="xs:string" default="8"  >
							<xs:annotation><xs:documentation>
								Range of effect value of the object. [System.Single, default: 8]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="EnemyClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanDefeatViaCombat" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can be defeated via combat. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanDefeatViaPurchase" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can be defeated via purchase. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PurchaseCostMultiplier" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Multiplier for the value of the goods required to buy out the camp. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MountainInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A mountain.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PlayerClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PowerPoleInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A power pole or a building connected to the power network.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ConnectionRangePoles" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range to connect other power poles and clients. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GeneratesEnergy" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Generates energy (power plants etc.). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsClient" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Consumes or produces energy. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsDistributor" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Distributes energy. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxCapacity" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								Maximum energy capacity (MWh). [System.Single, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PowerConnectionHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height where power connections are placed. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PowerConnectionScale" type="xs:string" default="0,66"  >
							<xs:annotation><xs:documentation>
								Width/height scale of connections. [System.Single, default: 0,66]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PowerConnectionType" type="xs:string" default="PowerConnection"  >
							<xs:annotation><xs:documentation>
								Type of the object to spawn as connection. [System.String, default: PowerConnection]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PowerConnectorPosition" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Position where the power connector is placed [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Slackiness" type="xs:string" default="0,5"  >
							<xs:annotation><xs:documentation>
								How much do the power lines get bent down (average of both connected poles counts). [System.Single, default: 0,5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnConnector" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn power connector. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RoadInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A road.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpeedBonus" type="xs:string" default="0,2"  >
							<xs:annotation><xs:documentation>
								Relative movement speed bonus. [System.Single, default: 0,2]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="VeinInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A vein.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building specific information. Relevant for workshops etc. as well.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HouseInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A house where colonists or animals live in.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AllowAnimals" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Allow animals to use this house. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AllowColonists" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Allow colonists to use this house. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DisappearWhileSleeping" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Sleeping here makes the actor disappear (to make it look like it entered this house). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Entrance" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative point at which colonists enter the house. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HousingCapacity" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How many actors can live here. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HousingQuality" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Tier of housing provided. If the tier is lower than the maximum tier of the current map, colonists will consider it as 'low quality housing'. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PlainBuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Just a building without any special function.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ProjectileInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A projectile fired from a weapon.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Damage" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Damage done by projectile when hitting an enemy. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Peak height of the projectile. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Time" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Time the projectile travels. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SocialBuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A social building like a tavern fulfills the colonists' social/leisure activity.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Animation" type="xs:string" default="Sit"  >
							<xs:annotation><xs:documentation>
								Satisfies drink need (e.g. cocktail bar). [System.String, default: Sit]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SatisfiesDrink" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Satisfies drink need (e.g. cocktail bar). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SatisfiesFood" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Satisfies food need (e.g. restaurant). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SuggestedBuildingsInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Suggested buildings.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SuggestedTypes" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Comma-separated list of suggested buildings. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TradeCaravanInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A house where colonists or animals live in.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ConveyorBeltInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A conveyor belt.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanRegisterToTile" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Are items that stop on this belt registered to the tile? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Direction" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								In which direction does it move? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightIn" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height in incoming direction. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightOut" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height in outgoing direction. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsDistributor" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is it a distributor? (can have multiple outputs) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" default="0,3333333"  >
							<xs:annotation><xs:documentation>
								How fast do elements move? [System.Single, default: 0,3333333]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ConveyorBeltModelUpdaterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Creates the conveyor belt effect. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Effect" type="xs:string" default="effects/ConveyorBeltStraight/ConveyorBeltStraight"  >
							<xs:annotation><xs:documentation>
								Name of the effect to apply [System.String, default: effects/ConveyorBeltStraight/ConveyorBeltStraight]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height of effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FilterInserterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Filter Inserter behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AngleExtentDrop" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AngleExtentPickup" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpot" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of from where to grab items. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ItemHeight" type="xs:string" default="0,3"  >
							<xs:annotation><xs:documentation>
								Item height (add) [System.Single, default: 0,3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ItemHeightBase" type="xs:string" default="0,2"  >
							<xs:annotation><xs:documentation>
								Item height (min) [System.Single, default: 0,2]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpot" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of to where to deliver items. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Offset" type="xs:string" default="0,375"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 1 (base) [System.Single, default: 0,375]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Prefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 1 (base) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Offset" type="xs:string" default="0,9583333"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 2 (arm) [System.Single, default: 0,9583333]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Prefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 2 (arm) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationFull" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationHalf" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - middle or middle - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="InserterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Inserter behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AngleExtentDrop" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AngleExtentPickup" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpot" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of from where to grab items. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ItemHeight" type="xs:string" default="0,3"  >
							<xs:annotation><xs:documentation>
								Item height (add) [System.Single, default: 0,3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ItemHeightBase" type="xs:string" default="0,2"  >
							<xs:annotation><xs:documentation>
								Item height (min) [System.Single, default: 0,2]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpot" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of to where to deliver items. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Offset" type="xs:string" default="0,375"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 1 (base) [System.Single, default: 0,375]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Prefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 1 (base) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Offset" type="xs:string" default="0,9583333"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 2 (arm) [System.Single, default: 0,9583333]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Prefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 2 (arm) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationFull" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationHalf" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - middle or middle - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AutoFarmInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds the behavior of an automated farm.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyConsumption" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Energy required per action. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Grove" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								0 for farm, 1 for grove [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowEverything" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Grow everything regardless of ground. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ReserveOnHarvest" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Reserve the harvested items so that colonists don't pick them up. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DepotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Picker (used internally).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Limit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit (for overflow exits). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsLogisticsTargetDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as logistics target per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsStockpileDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as stockpile per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PickerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Abstract, something that can store items.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AudioInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Play an audioclip in a semi-random interval.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ActiveWhenRaining" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Play at raintime. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ambience" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Count as ambience (for volume setting). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClipsDaytime" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the (built-in) audio clips that are to be played at daytime (comma-separated). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClipsNighttime" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the (built-in) audio clips that are to be played at nighttime (comma-separated). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Interval" type="xs:string" default="20"  >
							<xs:annotation><xs:documentation>
								Interval in seconds. [System.Single, default: 20]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnChance" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Probability to spawn this audio effect. Note: Every component and audio source costs performance. Therefore it makes sense to set this to less than 1 for non-critical objects like trees. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Volume" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Volume. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PermaAudioInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Play an audioclip permanently.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ClipName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the sound. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxDistance" type="xs:string" default="30"  >
							<xs:annotation><xs:documentation>
								Maximum audible distance. [System.Single, default: 30]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Volume" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Volume. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SimpleAutoAnimationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information regarding the voxel model.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DestroyAfterCycle" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Destroy after animation cycle. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Frames" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of frames. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TimePerFrame" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								time per Frame. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FoundationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Info for foundations (make a tile buildable).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MakesGroundFertile" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Makes ground fertile. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="NewType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Treat the tile like this afterwards (map tile type → new type) (for farms). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DomesticAnimalInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Domestic animal (can do jobs like your colonists).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MineableInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be mined, e.g. trees
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AttachToSoil" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Attach to underlying object, e.g. ore -> soil tile. Replaces mineable content of base object. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsMountain" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Make mountain mine sound when mined. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinesTo" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of things you get from mining. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MiningProbability" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Probability that this contains things to mine. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MiningSound" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Override sound the game plays when mining. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RandomLootAmount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								List of random loot you get from mining. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequiredToolLevel" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Tool level required to mine. (0-1=hand, 2=stone, 3=copper, 4=steel [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequiredToolType" type="xs:string" default="Mining"  >
							<xs:annotation><xs:documentation>
								Tool type required to mine this. [System.String, default: Mining]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowInUI" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Show in tooltips as a typical source to get the mined items. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnRemove" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Things to spawn after last element is mined (comma-separated list). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="NaturalResourceInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be mined by buildings, e.g. oil wells
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PastureAnimalInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Pasture animal (lives on pasture).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Yield" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								What can be yielded from this animal? Single object type. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="YieldInterval" type="xs:string" default="120"  >
							<xs:annotation><xs:documentation>
								How long does it take until this animal can be milked etc.? [System.Single, default: 120]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PlantInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that grows over time.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowsOnTile" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Only grows on specific ground tile. Leave empty for no restriction. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowthRateDay" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Growth rate at day time. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowthRateNight" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Growth rate at night time. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowTime" type="xs:string" default="60"  >
							<xs:annotation><xs:documentation>
								Tile until fully grown. [System.Single, default: 60]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsCrop" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be grown in farm. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsTree" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be grown in grove. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OnlyGrowIn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Only grows in specified autofarm/grove. Leave empty for no restriction. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RandomOrientation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Random rotation of planted crops/trees. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaterUsage" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Factor of water usage. 1 = water once per plant. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CargoShipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Cargo ship behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CargoAmount" type="xs:string" default="8"  >
							<xs:annotation><xs:documentation>
								Number of cargo spots. [System.Int32, default: 8]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CargoHeight" type="xs:string" default="0,6666667"  >
							<xs:annotation><xs:documentation>
								Relative height of the cargo. [System.Single, default: 0,6666667]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Speed of the ship. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GarbageDumpInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Garbage dump behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DecompositionTime" type="xs:string" default="60"  >
							<xs:annotation><xs:documentation>
								Time in seconds until a piece of garbage decomposes. [System.Single, default: 60]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GarbageType" type="xs:string" default="Garbage"  >
							<xs:annotation><xs:documentation>
								Type of garbage. [System.String, default: Garbage]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HarbourInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Cargo port behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DockingPoint" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative coordinate where the ship docks. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ExportTiles" type="xs:string" default="8"  >
							<xs:annotation><xs:documentation>
								Tiles for export. [System.Int32, default: 8]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ShipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Player ship.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FarmLandInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A Farm land.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LocomotiveInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A locomotive for a train.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Acceleration" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Acceleration force of the locomotive in t/s². [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Deacceleration" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Deceleration force of the locomotive in t/s². [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxSpeed" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Maximum speed of the train in t/s. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TrainAccelerateSound" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Sound that is played when accelerating. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TrainBrakeSound" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Sound that is played when braking. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WagonType" type="xs:string" default="TrainWagon"  >
							<xs:annotation><xs:documentation>
								The type of the wagon that belongs to this locomotive. [System.String, default: TrainWagon]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RailwayCrossingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A railway crossing. Closes when a train passes.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GatePosition" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of gate. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GateType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to use as gate. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SemaphoreInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A semaphore for train tracks.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GatePosition" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position of gate. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GateType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to use as gate. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="LookAhead" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How many segments to look ahead (used for pre-signals). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrackInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A track piece.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanPlaceSemaphore" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can place a semaphore above this track. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Connections" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of two tiles which this track connects. [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Curve" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is a curve. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Deconstructable" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Deconstructable. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Points" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative points along which the trains will move. [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ramp" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Ramp. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainFactoryInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Train factory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Train Station.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Limit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit (for overflow exits). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tracks" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of tiles where trains will stop, separated by ',', multiple platforms separated by 'newline' [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsLogisticsTargetDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as logistics target per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsStockpileDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as stockpile per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainWagonInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A wagon of a train.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Cargo" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can carry cargo. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CargoAmount" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Cargo amount. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CargoPositions" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Cargo positions. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WaterSprinklerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A water sprinkler.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Area" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Area that is sprinkled (square effect, extent in either direction). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="VisibilityUpdaterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a visibility updater that regular checks if an object is under the fog of war.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InverseFogOfWar" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Visible only when inside fog of war. (e.g. camp marker) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StayRevealed" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Stay revealed. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AbstractBuildingWithBoxesInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building that spawns boxes. Abstract.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationMode" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AbstractWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Abstract, use ManualWorkshopInfo or AutomaticWorkshopInfo instead.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationMode" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ChargeLimit" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Production limit (for chargable buildings like elemental monuments). [System.Int32, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Efficiency" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Factor for the production time. [System.Single, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyConsumption" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Amount of energy required per second in MW. Leave at 0 for no energy consumption. Important: If you use this, you also need a PowerPoleInfo.  (only used for automatic workshops) [System.Single, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HasRallyPoint" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Has a rally point (used for robot workshop). [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HitAnimation" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Decrease object scale when hit [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string"  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MakeInputsInvisibleOnAnimation" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Make inputs invisible when animation starts. Useful if the animation of the workshops includes the ingredients wandering around.  [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string"  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowChargeCounter" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Show production count and limit in UI (for chargable buildings like elemental monuments). [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowProductionLimits" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Show production limits in UI. [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AutomaticPowerGeneratorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building used to generate power automatically.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyPerSecondDayTime" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Power generated per second at daytime. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyPerSecondNightTime" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Power generated per second at nighttime. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AutomaticWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop that produces automatically given it has the required inputs.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationMode" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ChargeLimit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Production limit (for chargable buildings like elemental monuments). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Efficiency" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Factor for the production time. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyConsumption" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Amount of energy required per second in MW. Leave at 0 for no energy consumption. Important: If you use this, you also need a PowerPoleInfo.  (only used for automatic workshops) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HasRallyPoint" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Has a rally point (used for robot workshop). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HitAnimation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Decrease object scale when hit [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MakeInputsInvisibleOnAnimation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Make inputs invisible when animation starts. Useful if the animation of the workshops includes the ingredients wandering around.  [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowChargeCounter" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Show production count and limit in UI (for chargable buildings like elemental monuments). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowProductionLimits" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Show production limits in UI. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FuelBasedPowerGeneratorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building used to generate power automatically.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationMode" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ConversionTime" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								How long does it take for fuel to be fully converted to energy (s). [System.Single, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Efficiency" type="xs:string" default="2"  >
							<xs:annotation><xs:documentation>
								How efficiently is fuel converted to energy. [System.Single, default: 2]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ManualWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop operated by your colonists.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AllowsPropagateToStockpiles" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Enables the propagate to stockpiles button. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationMode" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ChargeLimit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Production limit (for chargable buildings like elemental monuments). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraftingSound" type="xs:string" default="Construct"  >
							<xs:annotation><xs:documentation>
								The sound it makes when crafting. [System.String, default: Construct]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Efficiency" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Factor for the production time. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyConsumption" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Amount of energy required per second in MW. Leave at 0 for no energy consumption. Important: If you use this, you also need a PowerPoleInfo.  (only used for automatic workshops) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HasRallyPoint" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Has a rally point (used for robot workshop). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HitAnimation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Decrease object scale when hit [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MakeInputsInvisibleOnAnimation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Make inputs invisible when animation starts. Useful if the animation of the workshops includes the ingredients wandering around.  [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequiredToolLevel" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Level of tools required to operate this workshop. Only relevant if RequiredToolType is set. ToolInfo→BaseEffect is the corresponding level of the tool. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequiredToolType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Class of taskgroup/tools required to operate this workshop (e.g. Mining to require a pickaxe, agriculture to require a shovel etc.). Leave empty for no tool. Use together with RequiredToolLevel. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireOutputStockpiles" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Require output stockpiles. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowChargeCounter" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Show production count and limit in UI (for chargable buildings like elemental monuments). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowProductionLimits" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Show production limits in UI. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PowerGeneratorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building used to generate power.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnergyPerCycle" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Power generated per cycle. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AudioClipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Need type. (e.g. food or drink)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AudioClips" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								(Internal) [System.Collections.Generic.List`1[UnityEngine.AudioClip], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BasePitch" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Base level of the pitch. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BaseVolume" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Base level of the volume, between 0-1 (1=100%). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PitchVariance" type="xs:string" default="0,1"  >
							<xs:annotation><xs:documentation>
								Random variance of the pitch. [System.Single, default: 0,1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" default="100"  >
							<xs:annotation><xs:documentation>
								Priority (lower = more likely to play). [System.Int32, default: 100]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Source" type="xs:string" default="?"  >
							<xs:annotation><xs:documentation>
								Link to where this file is from. (Optional, in case of copyright questions) [System.String, default: ?]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Variations" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of variations. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VolumeVariance" type="xs:string" default="0,25"  >
							<xs:annotation><xs:documentation>
								Random variance of the volume. [System.Single, default: 0,25]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RecommendationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Recommendations.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Items" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Items and buildings to be produced. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverrideMinimumTier" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Override minimum tier where this is shown. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Priority: Overrides order in which recommendations show up. Leave empty to sort by reward. Set priority to -1 or lower to have it show up before the vanilla recommendations. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ReplaceBuildCheck" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Replace the check if something is buildable. This is used, for example, for the ore smelter where the recommendation is shown even when copper ore has not been mined yet. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Reward" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Reward (coins). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowInCampaign" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Show in campaign. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowRegardlessOfLevel" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Show on higher tiers. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowWhenSpawnLimitActive" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Show when spawn limit is active. This is used for the 'half-tiers'. E.g., in the first half of tier 1 clay is not available. Therefore things made from bricks should not be recommended. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Title" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Title of the recommendation (localization reference, leave empty for 'set up...'). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BaseInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Basic/universal object information.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AddCollider" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Add a collider. This will prevent colonists and other creatures from walking through this object. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AddHeightForItems" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Additional height to be added to other items on this tile. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AdditionalSpawns" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Other objects to spawn alongside (e.g. the tracks in the train station). List of ObjectType,relx,rely,relz,rot, multiple lines with one entry per line. Do not use this on items as they might not get handled correctly. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AllowBatching" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Allow static batching. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CannotBuildDirectly" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Only buildable via upgrading. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Faction" type="xs:string" default="Neutral"  >
							<xs:annotation><xs:documentation>
								Default faction (Player, Neutral, Enemy) [Faction, default: Neutral]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ForbidDeconstruction" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Don't allow the player to deconstruct this. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HalfTier" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								In upper part of the tier. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IgnoreFogOfWar" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Visible even when inside fog of war. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InvisibleToUser" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Invisible in user interface. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsAutoRemoveScenery" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Scenery that is automatically removed when something is built on top, e.g. a worm. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PreventSpawn" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Prevent object from spawning (for modding). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RegisterToRepository" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Register in object repository. Should usually be true except for UI elements. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Selectable" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be selected by clicking on it. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Serializable" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Is saved to save file. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Size" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How many tiles are occupied by this object in either direction. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SizeWidth" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Use if a building is not square. Leave empty/as 0 if square. The game only supports SizeWidth if it is odd and the base Size is odd, e.g. 3 and 5. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SoundOnSelect" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Sound to be played when the object is selected. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Substitutes" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Substitutes for this item. Used for recommendations. (,-separated list of types. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Tier this item belongs to. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseNameFromType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Use another object's name for the UI, e.g. TrainStationSmall→TrainStation. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ModelInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information regarding the voxel model.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AnimationAutoStart" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Animation starts automatically when object is spawned, e.g. UI or scenery. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationAutoSync" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Animation is synced automatically, e.g. harvest indicators. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationFrames" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of animation frames (e.g. walking). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationIgnoreVisibility" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Animate even when not visible. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationRandomOffset" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Random time offset for animation [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationSpeed" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How many animation steps per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BoundingBoxExtent" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Override the size of the bounding box (where to click to select an object). Note: This is overridden when you specify Walls. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFrames" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of building animation frames. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CombineMeshes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Combine adjacent meshes. Do not use for non-static things. (used for floor tiles). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CustomMaterial" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Use special material. Used for ocean and water. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DestroyAfterAnimationCycle" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Used for UI elements. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DoNotSpawn" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Do not actually spawn (used for ocean). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DrawShadows" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Catches shadows from lights. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="generatedIcon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Icon. (generated internally) [UnityEngine.Texture2D, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height at which arrows etc. are displayed. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightOverride" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Ignore other modifiers and set the height of this object (e.g. for tile overhangs). [System.Single, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="icon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Icon. (drawn or generated internally) [UnityEngine.Texture2D, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IconsForAllVariations" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Generate IconsForAllVariations [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IndicationArrowAngle" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Direction for the indication arrow [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaterialID" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								ID of the material to use. (0=standard, 1=transparent, 2=glowing) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ModelVariations" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Number of model variations (e.g. colonists). To use this, create as many model files, e.g. xxx1.vox, xxx2.vox etc. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ModifierStack" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								+-separated list of modifiers to be applied when spawning (rtx, rty, rtz, rr). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Overhang" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Is overhang between two terrain types. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleColor1" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 0.000)"  >
							<xs:annotation><xs:documentation>
								Color of special effect particles. (The game picks a random color between 1 and 2 for every particle) [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 0.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleColor2" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 0.000)"  >
							<xs:annotation><xs:documentation>
								Color of special effect particles. (The game picks a random color between 1 and 2 for every particle) [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 0.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleEmissionSpeed" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Particle emission speed (0 = default). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleSpawnRadius" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Particle spawn radius (0 = default). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleSpawnRate" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Particle spawn rate (0 = default). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleX" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in x-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleY" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in y-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleZ" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in z-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SelectionBoxHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height scale of the selection box. Note that this value is not in tiles but relative to the default selection box. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowIndicationArrow" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Show an arrow when in build mode, e.g. conveyor belts. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialHeight" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height of special effects. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightColor" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 0.000)"  >
							<xs:annotation><xs:documentation>
								Color of special effect lights. [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 0.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightFlicker" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Flicker intensity of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightIntensity" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightNearPlane" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Near plane of this light's shadows. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightRange" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Range of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialPrefabs" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Special effects to add. Multiple effects can be separated by ;. The syntax for each element is: name of the object,x,y,z,[rot] [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TopLayerOnly" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Extract top face. Used for tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SpawnerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adding this to an object will cause it to be automatically spawned onto maps.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CanSpawnOnOtherItems" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn on top of other objects (e.g. clay and ore). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DontSpawnInWater" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Don't spawn this in water. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ExactSpawnNumber" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Set the exact number of spawns. Overrides SpawnMinimum and SpawnFrequency. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FixedRotation" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Fix the spawn rotation to an angle (-1 for random). [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxX" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Where on the map should it spawn? (Only x-coordinate). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxY" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Where on the map should it spawn? (Only y-coordinate). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinX" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Where on the map should it spawn? (Only x-coordinate). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinY" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Where on the map should it spawn? (Only y-coordinate). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="NeedsToBeOnShore" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Only spawn where there is water access to the edge of the map. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireLevel" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Require specific height level. [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireWalkable" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Only spawn where your people can go. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterExtent" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How spread apart are things in a spawn cluster. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterSize" type="xs:string" default="NumRange"  >
							<xs:annotation><xs:documentation>
								Number range of objects per spawn (e.g. 3:5 trees). [NumRange, default: NumRange]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCohesive" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn in clumps (e.g. rocks). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnFrequency" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Relative spawning frequency. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnLevels" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Height levels on which it can spawn. (0=ocean, 1=water, 2=sand, 3=grass, 4=soil, 5=rock) [System.Int32[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnMinimum" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum number of spawns relative to map size (e.g. 0.0001). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnMinimumTier" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum tier to spawn (0 = all, 1=grassland, 2=desert, 3=dark...) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Tiles types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="NeedType" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Need type. (e.g. food or drink)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ActionsToSolve" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Actions to perform when need is low. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AffectsNeutrals" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Need affects neutral animals. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="changePerMinute" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Level change per minute. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="criticalBelow" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Level it which need is considered critical (0-100). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="icon" type="xs:string" default="Close"  >
							<xs:annotation><xs:documentation>
								Icon to use for need in UI. [System.String, default: Close]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="lowBelow" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Level it which need is considered low (0-100). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Manual" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Controlled by code. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StartFulfillment" type="xs:string" default="80"  >
							<xs:annotation><xs:documentation>
								Fulfillment level at the start of the game (0-100). [System.Single, default: 80]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteObjectsInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used to delete vanilla objects from the game.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Types" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Comma-separated list of things to remove. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TaskGroupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A task group (e.g. agriculture).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AddJobGenerationProcess" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Enables these additional task generation processes for the colonists with this taskgroup, e.g. if you want to have a fishing job, add Produce. Comma separated list. Possible task types are: Attack, Construct, ConstructClear, UpgradeCarry, Deconstruct, Mine, Produce, Recycle, AutoWorkshopClear, SupplyAutoWorkshop, UnloadAutoWorkshop, Export, Import, Clean, Unload, UnloadAuto, LogisticsSystem, Stockpile, Power, Equip, Unequip, Drink, Eat, MoveIntoHouse, Socialize, Sleep, Idle, Wander, Tame, YieldAnimal, PlantCrop, PlantTree, Till, ClearFarm, ClearGrove, FarmWater, HarvestCrop, HarvestTree [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AddToDefaultColonists" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Enable to make the vanilla colonists do this task. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefaultPriority" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								1 for on by default. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefaultPriorityForAnimals" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								1 for on by default. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ExperienceFactor" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Multiplicator of exp gain. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HasTool" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								There is a tool associated with this group. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for task group in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Relative priority (lower = higher) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Selectable" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can be toggled on/off by player. (E.g. need fulfillment cannot be switched off). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Visible" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in UI. (E.g. need fulfillment cannot be switched off). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VisibleInActorPanel" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in actor UI. (E.g. need fulfillment cannot be switched off). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DifficultyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						How many enemy camps to spawn on this map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Density" type="xs:string" default="1,5"  >
							<xs:annotation><xs:documentation>
								How many camps to spawn per 1000 map tiles. [System.Single, default: 1,5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Difficulty" type="xs:string" default="50"  >
							<xs:annotation><xs:documentation>
								Base difficulty. Nearest camp will have around this as a total strength. Furthest camp will have 2x. [System.Single, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxSpawns" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Maximum number of camps to spawn. (-1 to disable) [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinSpawns" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Minimum number of camps to spawn. (-1 to disable) [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="EnemyCampInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information on the setup of a single enemy camp.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnemySpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								What enemies need to be defeated  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FriendlySpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								What captured colonists/animals should spawn here?  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterExtent" type="xs:string" default="3"  >
							<xs:annotation><xs:documentation>
								How spread apart are things in a spawn cluster (first elements). [System.Int32, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterExtentMax" type="xs:string" default="4"  >
							<xs:annotation><xs:documentation>
								How spread apart are things in a spawn cluster (last elements). [System.Int32, default: 4]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Tile types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToSpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Things that will be spawned, e.g. 2*Pig,1*RecruitingFlag [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SubBiomeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds sub biomes, e.g. oases in deserts.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxFrequency" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Frequency with which this biome is spawned (in % of tiles, e.g. 0.0005. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinFrequency" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Frequency with which this biome is spawned (in % of tiles, e.g. 0.0005. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinSpawns" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum number of spawns [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectsToSpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of objects to spawn, e.g. 3*Tree,2*Turtle [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								On which terrain should this be spawned? [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainToSpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of terrain to spawn, e.g. 10*Floor_Water,10*Floor_Grass [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BuildingCategoryInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building category.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CategoryName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the category. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the icon (can be a UI icon or the name of an object type). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CampaignInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Info for a campaign.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CampaignName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the campaign (localization string). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DialogOnStart" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Dialog to display at start of campaign. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FixedCharacters" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Named characters that are guaranteed to spawn and cannot be left behind. Separated by newline, format: objecttype,variation,name. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="LoadingScreenText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Dialog to display at the loading screen of the campaign. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Loadout" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Things to spawn (e.g. 3*SettlerFemale,3*SettlerMale,4*Pig). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Visible" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in campaign selection. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="IslandInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Island in a campaign.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AddRandomModifiers" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Add random modifiers in addition to the fixed ones. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Background" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 0.000)"  >
							<xs:annotation><xs:documentation>
								Texture behind the island (used for cursed waters in campaign). [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 0.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BackgroundScale" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Texture behind the island (used for cursed waters in campaign). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DescriptionText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to be shown in the tooltip on the world map and in the loading screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DialogOnEnd" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Dialog to display on world map after this island is done. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnemyCamps" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Enemy camps (leave empty for random). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FixedModifiers" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Fixed modifiers of this island (must include terraininfo and enemycampinfo). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Hidden" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Hidden until it can be reached. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ID" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								ID of the island. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IslandName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the island. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="LinkedIslands" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Comma-separated list of island-ids this island connects with. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MapGoal" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Goal (leave empty for none). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MapSize" type="xs:string" default="MapSizeSmall"  >
							<xs:annotation><xs:documentation>
								Map size. [System.String, default: MapSizeSmall]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Optional" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Optional missions are not required to win the campaign. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecommendedTutorials" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Recommended tutorials, comma-separated list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Seed" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Seed of the map. Leave at 0 for random. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerSpawn" type="xs:string" default="SpawnSettlers"  >
							<xs:annotation><xs:documentation>
								Settler spawn modifier. Can be used to replace the standard boat + bonfire spawn. [System.String, default: SpawnSettlers]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Terrain" type="xs:string" default="TerrainGrassland"  >
							<xs:annotation><xs:documentation>
								Comma-separated list of terrains. [System.String, default: TerrainGrassland]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Used to calculate money goals etc.. (Note: Can be floating poing, e.g. 1.5) [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tips" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Comma-separated list of tips. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnlockedAtStart" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								The island the player starts it. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="X" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Position of the island (x). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Y" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Position of the island (y). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CustomMusicInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Custom music for the game. Make sure that you have the rights/license to share the music file and credit the artist(s).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Filename" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the music file to load. Path is relative to the mod's base directory. The file must be in OGG format. Keep in mind that filenames are case-sensitive on Linux and Mac. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PlayAtDaytime" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Play this at daytime (6:00-18:00). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PlayAtNighttime" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Play this at nighttime (18:00-6:00). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PlayInCombat" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Play this while in combat. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RemoveVanillaMusic" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Remove the built-in music from the playlist. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CustomSpawnInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a specific custom spawn (e.g. items, monsters etc.) to the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AvoidOtherSpawns" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Try to spawn as far away from other spawns as possible. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnemySpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								If recruiting flag is spawned: What enemies need to be defeated  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Faction" type="xs:string" default="Neutral"  >
							<xs:annotation><xs:documentation>
								Faction of things in this spawn group: Player, Enemy or Neutral. [Faction, default: Neutral]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MainPlayerSpawn" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is this the main player spawn point? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinimumDistanceToOtherSpawns" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								Try to spawn as far away from other spawns as possible. [System.Int32, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PreferredRot" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Preferred rotation (leave for no preference). [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PreferredX" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Preferred x position (leave for no preference). [System.Single, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PreferredY" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Preferred y position (leave for no preference). [System.Single, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnLevels" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Height levels on which it can spawn. (0=ocean, 1=water, 2=sand, 3=grass, 4=soil, 5=rock) [System.Int32[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Tile types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToSpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Things that will be spawned, e.g. 2*Pig,1*RecruitingFlag [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DioramaContentInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A diorama description (do not edit this directly, use the diorama generator tool instead.)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Content" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								A diorama description (do not edit this directly, use the diorama generator tool instead.) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RevealMapInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Reveal entire map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ExactSpawnInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Size of the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Spawns" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Newline-separated list of spawns. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SuppressGenericSpawns" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Suppress scenery and enemy camp spawns. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Translate" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Translate content. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LocalizationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Specifies how a thing is called in the game.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Content" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Newline-separated list of string assignments, e.g. ObjectType.Slime = Slime [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Language" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Language for which this block is. (You can have multiple LocalizationInfos in the same file). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LockButtonInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						UI Buttons to lock (usually for tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ApplyOnReload" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Also apply when you load a game. Do not use when buttons get unlocked, as this will not be considered. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Identifiers" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of buttons to lock. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AddMoneyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Add money.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Amount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Money. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OverrideCargoInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Override cargo with target production (usually for testing).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AddDefaultCargo" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Add the cargo that would be added normally. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AddXPLevels" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Add XP level to all friendlies. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Colonists" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Colonists to add. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Progress" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Progression within tier. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Tier. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableNeedInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Needs to disable (usually for tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Identifiers" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of needs to disable. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AdvanceNeedTierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Make higher tier needs appear faster.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DaysToAdvance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Days to advance the needs. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="LimitTier" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit need tier. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TimeFactor" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Days to advance the needs. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableBuildingsInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Buildings to disable (for some story missions).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Buildings" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of buildings to disable, comma separated list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableRecipeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Buildings to disable (for some story missions).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FirstOutput" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the first output of the recipe to be disabled. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RemoveCargoInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Cargo to remove (for some story missions).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Cargo" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of cargo to disable, comma separated list. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CargoSpaceInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						How much cargo fits on boat? (when multiple are present, the game uses the maximum)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CargoSpace" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How much cargo fits on boat?  [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MaxObjectivesInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Number of simultaneous objectives.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Count" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Number of simultaneous objectives. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableRecommendations" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Disable recommendations (usually for tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableCombat" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Disable combat (you can only buy enemy camps).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SpawnModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Modify spawning amounts.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnModifiers" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of modifications, e.g. Tree*1.5,Rock*1.75 [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FriendlySpawnModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Modify spawning amounts of friendlies in enemy camps.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Multiplier" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Multiplier [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MapSizeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Size of the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinimumHostileDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How far away from the player can enemies spawn (minimum distance)? [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Size" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Size of the map (one dimension). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnDensityMultiplier" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Reduce/increase number of spawns (multiplied with terrain density). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MinimumGoodInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Minimum goods to ensure (tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Goods" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of goods, e.g. 5*log,5*minedrock. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A map modifier controls the map generation process or adds objectives and goals.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AutoSpawn" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Automatically add one of this group to every map? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Description" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Description key. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Group" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Group of this modifier. Only one modifier of a given group can be active at the same time (e.g. map size) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupDefault" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is default of given group. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupIndex" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Order in which group items are placed. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupIsMandatory" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								A map needs to have one of these. (e.g. map size) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IntroText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the introductory text key. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnRandomMaps" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawns on random maps. (vs. only when selected manually on the custom map screen) [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Visible" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in the custom map screen. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ScenarioInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A fixed scenario consisting of multiple modifiers.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Achievement" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Achievement on completion. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Description" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Description string. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Icon to show in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MapSeed" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Seed of the map. Leave at 0 for random seed. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Modifiers" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of modifiers. [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Number" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Number of scenario (for sorting in UI). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tutorial" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is tutorial? For metrics and inclusion in tutorial menu. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Visible" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in custom map setup? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VisibleWithoutExpertMode" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Visible without expert mode on? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ShaderInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Controls different shader effects.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AmbientOcclusionIntensity" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of the ambient occlusion effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AmbientOcclusionRadius" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Radius of the ambient occlusion effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BloomIntensity" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of the bloom effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BloomThreshold" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Brightness threshold for the bloom effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorTemperature" type="xs:string" default="5"  >
							<xs:annotation><xs:documentation>
								Color temperature. [System.Single, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnvironmentParticleColor" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 0.000)"  >
							<xs:annotation><xs:documentation>
								Color of the little environment blocks. [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 0.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainDuration" type="xs:string" default="50"  >
							<xs:annotation><xs:documentation>
								Duration of rain. [System.Single, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainTimeBetween" type="xs:string" default="500"  >
							<xs:annotation><xs:documentation>
								Time between rain. [System.Single, default: 500]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainTransitionTime" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								Time to transition between rain and no rain. [System.Single, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TerrainInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a terrain type to the game.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="ambiencetrackcenter" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Audio track to be played at the center of the map. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorLogisticsConnection" type="xs:string" default="RGBA(0.200, 0.650, 0.850, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Logistics Connection. [UnityEngine.Color, default: RGBA(0.200, 0.650, 0.850, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorSettlerActiveTask" type="xs:string" default="RGBA(0.000, 1.000, 0.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Set Task. [UnityEngine.Color, default: RGBA(0.000, 1.000, 0.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorSettlerAssignedWorkshop" type="xs:string" default="RGBA(0.820, 0.390, 1.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Assigned Workshop. [UnityEngine.Color, default: RGBA(0.820, 0.390, 1.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorStockpileConnectionIn" type="xs:string" default="RGBA(0.810, 0.850, 0.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Stockpile Connection (in). [UnityEngine.Color, default: RGBA(0.810, 0.850, 0.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorStockpileConnectionOut" type="xs:string" default="RGBA(0.850, 0.530, 0.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Stockpile Connection (in). [UnityEngine.Color, default: RGBA(0.850, 0.530, 0.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FloorByHeight" type="xs:string" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of 6 different floor type names by height, e.g. Floor_Ocean,Floor_Water,Floor_Sand,Floor_Grass,Floor_Earth,Floor_Earth. [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MusicPlaylist" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Music playlist (currently empty = grassland, desert = desert. :) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireConsistentLandMass" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Make sure that every part of the island is accessible by walking. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Seed" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Fixed seed of the map. Leave empty for random seed. [System.Nullable`1[System.Int32], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnDensity" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								What percentage of the tiles will spawn things? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainEqualization1" type="xs:string" default="0,66"  >
							<xs:annotation><xs:documentation>
								Propensity of low frequency terrain generation. [System.Single, default: 0,66]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainEqualization2" type="xs:string" default="0,33"  >
							<xs:annotation><xs:documentation>
								Propensity of high frequency terrain generation. [System.Single, default: 0,33]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainFrequencies" type="xs:string" default="System.Single[]"  >
							<xs:annotation><xs:documentation>
								Relative frequency of the 6 floog types, e.g. 0.6,0.1,0.15,0.4,0.1,0 [System.Single[], default: System.Single[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Indication of the difficulty of this terrain. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TerrainModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Change the realtive frequency of the different terrain types.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ForceRainbow" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Force rainbow (line wise terrains) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SuppressSubbiomes" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Do not spawn subbiomes [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainFrequencyModifiers" type="xs:string" default="System.Single[]"  >
							<xs:annotation><xs:documentation>
								List of 6 numbers for each terrain type. E.g. 1,1,1,1,2,2 for extra mountains. [System.Single[], default: System.Single[]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DialogInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A dialog to be shown in a story mission.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="BackgroundImage" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Image to use as a background for the dialogue. Leave empty for default. The recommended aspect ratio of the image is 16:6. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Content" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Newline-separated list. Format for each line is name_of_character:name_of_image:localization_string[:background_image] [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								ID of this dialog.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LoadingScreenInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Loading screen name.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Color" type="xs:string" default="RGBA(1.000, 1.000, 1.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of the image.  [UnityEngine.Color, default: RGBA(1.000, 1.000, 1.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Loading screen name to be shown.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TextColor" type="xs:string" default="RGBA(1.000, 0.970, 0.849, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of the text.  [UnityEngine.Color, default: RGBA(1.000, 0.970, 0.849, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ObjectiveGroupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A group of objectives (e.g. setup a workshop). 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AchievementOnComplete" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								(Internal) achievement to grant when objective is completed. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Bonus" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Optional objective group, can complete map without doing this. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Description" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Description string of this objective group. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								ID of this group (use in related ObjectiveInfos). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Hidden" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Hidden objective group. Use this e.g. if you want to trigger a dialog when something is done. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IntroDialog" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Dialog to display when objective group is started. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IntroText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								String to display when objective group is started. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectiveGenerator" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								(Internal) function to generate objectives. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OnlyNoAssist" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Only show when no assist mode enabled. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutroDialog" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Dialog to display when objective group is complete. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutroText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								String to display when objective group is complete. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TutorialNum" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Number of this tutorial. Leave at -1 if no tutorial. [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnlockButtons" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Buttons to unlock when this group begins. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitFor" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Wait for groups with thes ids before beginning this group (comma-separated list). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitForSeconds" type="xs:string" default="3"  >
							<xs:annotation><xs:documentation>
								Wait for x seconds after previous objective before showing this group.  [System.Int32, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ObjectiveInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						An objective to be used for an objective group.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								ID of the group it belongs to. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Object2ID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object 2 ID [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object ID [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object type [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Target" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Depending on objective: target [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TargetPercentage" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Depending on objective: target percentage [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskGroup" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: task group [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of this objective.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BuildingRecipeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be built.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="BlueprintItems" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to exist to enable it. This is currently not used in vanilla and intended for modding. For example, you can specify a blueprint item to be required. In contrast to ingredients, this item will not be transported or consumed in the process. (comma-separated list) Also have a look at UnlockWhenIngredientsNotPresent. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildAbove" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Build above resource (o.g. oil well). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBuildOnAllSolidGround" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be built on sand and other solid tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBuildOnWater" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be built on ocean and water tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBuildOutsideTerritory" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be built outside of your territory, e.g. outpost bonfires. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HarborPlacement" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Building placement like harbors. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IgnoreItemsOnConstructionSite" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Do not clear items on construction site. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ingredients" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to build it. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InstaBuild" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Is built instantly (e.g. depot exits/entries). Should only be used when the building requires no ingredients. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaximumCount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Maximum number that can be built of this building type. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MultiBuild" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Colonists can build multiple instances in one go. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MultiPlacement" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								The player can place multiple instances by dragging an area. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequiredToolLevel" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Tool level required to build (0-1=hand, 2=wood, 3=iron...), (Note: ignored for building upgrades). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireFertileGround" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can only be built on fertile tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToggleBuild" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Building twice removes previous instance. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnlockWhenIngredientsNotPresent" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Does not check for the ingredients to be present. (Useful for modding with BlueprintItems) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VariationBasedOnTile" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Map of tile type → variation (o.g. foundations). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ItemInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be produced/mined.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CanBeDemandedFromEnemies" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can be used to pay out enemy camps. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBeDonated" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can be donated. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanDropAsLoot" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can drop as loot from enemies. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanDropFromChests" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can drop from chests. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Category of the item (used for sorting in the type filter panel). [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefaultCargo" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How many of this item are on your ship at the start of the game. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FoodValue" type="xs:string" default="100"  >
							<xs:annotation><xs:documentation>
								Maximum saturation that can be reached using this food/drink. [System.Single, default: 100]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FuelValue" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How much energy do you get when burning it in a power plant? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighStackCount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How many of this item can be stacked in one tile (high capacity). Leave at 0 for same capacity as StackCount. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsDrink" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be drunk. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsFood" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be eaten. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsWater" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can be used to water plants. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverrideExportFalse" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Set to not exportable. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverrideExportTrue" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Set to exportable. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverrideImportFalse" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Set to not importable. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverrideImportTrue" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Set to importable. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OverridePrice" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Price override (-1 = automatic pricing). [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ProductionTargetAmount" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Production/inventory target amount. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackCount" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How many of this item can be stacked in one tile. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackDist" type="xs:string" default="2,5"  >
							<xs:annotation><xs:documentation>
								Stacking: horizontal distance between stached items. [System.Single, default: 2,5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackHeight" type="xs:string" default="3,25"  >
							<xs:annotation><xs:documentation>
								Stacking: vertical distance between stacked items. [System.Single, default: 3,25]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Stacking: Cross, Beside, EndlessStack, CenterStack or Pyramid. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TileInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Info for floor tiles.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="BuildableGround" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can build normal buildings here. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ChildHeight" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height of every item/building on this tile. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Fertile" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can build farms here. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FixedRotation" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Fixed rotation (otherwise random). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Level" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height level (0-1 = ocean/water, 2=sand, 3 = grass/main, 4-5=mountains) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SolidGround" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Can place items here and build things like bonfires. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnTop" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Items to always spawn on top, e.g. earth -> mountain). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Walkable" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Can actors walk here? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Wanderable" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Will actors wander here? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Water" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Ships can drive here. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMColor" type="xs:string" default="RGBA(0.000, 0.000, 0.000, 1.000)"  >
							<xs:annotation><xs:documentation>
								Color of the tile on the world map [UnityEngine.Color, default: RGBA(0.000, 0.000, 0.000, 1.000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMHeight" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Height of the tile on the world map [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMScenery" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Scenery block for the world map, frequency,color,height,width [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UpgradeableBuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can upgraded (e.g. Bonfire→OutpostBonfire). Note that the target building still needs a BuildingRecipeInfo, even when it is only constructable via upgrading. The upgraded building should have the same size (in tiles) as the base building, otherwise a variety of bugs can occur.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IgnoreItemsOnConstructionSite" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Don't clear items while upgrading (e.g. depot). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ingredients" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to upgrade it. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InstaBuild" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Colonists don't need to get here to build it. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TargetType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to which to upgrade to. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WorkshopRecipeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Recipes for workshops.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AnimationOverride" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Workshop animation to play when this item is produced. Use the name of a hidden workshop type with the model you want to use while this recipe is getting executed. Make sure the other workshop model has the same number of building frames as the original one. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraftingMaximum" type="xs:string" default="-1"  >
							<xs:annotation><xs:documentation>
								Maximum number of items that can be produced. Leave at -1 for unlimited. Note that this only applies to manual workshops and does not prevent the player from 'overcrafting' by using multiple workshops at the same time.  [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CustomName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Custom name for the recipe (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ForceIconFromInput" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Use icon from input good.  [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Inputs" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to build it. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Outputs" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Output generated by this recipe. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Probabilities" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of probabilities for the individual outputs to spawn (e.g. 0.4,0.6 - the sum should be 1 (or is normalized otherwise)). Note that this only works correctly when there is exactly one output good per probability. [System.Single[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ProductionTime" type="xs:string" default="10"  >
							<xs:annotation><xs:documentation>
								Base time required to build this. [System.Int32, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ReplaceExistingRecipe" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								Replace existing recipe on this object (for modding).  [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Workshops" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops where it can be built. Leave empty for farm produce etc.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="NavGraphHeightAdaptationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						(Used internally).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WindInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Add to make item affected by wind.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CarriageInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a carriage controller.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="CarryPosition" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Relative position at which carried goods are displayed. [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RotationSpeed" type="xs:string" default="180"  >
							<xs:annotation><xs:documentation>
								Rotation speed in degrees per second. [System.Single, default: 180]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Travel speed of this carriage. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CarriageSpawnerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A station inbetween zeppelins can travel. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarriageType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to spawn as carriage. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FreeCarriages" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of free carriages to spawn. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Limit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit (for overflow exits). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsLogisticsTargetDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as logistics target per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsStockpileDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as stockpile per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CarriageStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A station inbetween zeppelins can travel. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarriageType" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to spawn as carriage. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FreeCarriages" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Number of free carriages to spawn. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Limit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit (for overflow exits). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsLogisticsTargetDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as logistics target per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsStockpileDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as stockpile per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a zeppelin controller.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="Acceleration" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Acceleration in t/m². [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Altitude" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Travel altitude. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Resistance" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Wind resistance. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinDepotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A zeppelin factory - produces zeppelins when spawned.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ZeppelinCount" type="xs:string" default="3"  >
							<xs:annotation><xs:documentation>
								Number of zeppelins to spawn. [System.Int32, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ZeppelinType" type="xs:string" default="ZeppelinUnit"  >
							<xs:annotation><xs:documentation>
								Type of zeppelin to spawn. [System.String, default: ZeppelinUnit]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A station inbetween zeppelins can travel. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="AdditionalText" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Text to show in icon (like 5x5 for depots). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFoundation" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Build foundation when built on low ground. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeight" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneHeightMin" type="xs:string" default="0,45"  >
							<xs:annotation><xs:documentation>
								Height for the crane. [System.Single, default: 0,45]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefinedFields" type="xs:string" default="System.Collections.Generic.List`1[System.Reflection.FieldInfo]"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: System.Collections.Generic.List`1[System.Reflection.FieldInfo]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DownIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw a down indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightSpan" type="xs:string" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height span for the crane. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HighCapacity" type="xs:string" default="False"  >
							<xs:annotation><xs:documentation>
								High capacity (for depots). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. (Must be round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Limit" type="xs:string" default="0"  >
							<xs:annotation><xs:documentation>
								Limit (for overflow exits). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. (Must be a round relative tile position) [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SubCategory" type="xs:string" default="None"  >
							<xs:annotation><xs:documentation>
								Used for sorting in the building list. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UpIndicationArrow" type="xs:string" default="(0.0, 0.0, 0.0)"  >
							<xs:annotation><xs:documentation>
								Draw an up indication arrow when building? [UnityEngine.Vector3, default: (0.0, 0.0, 0.0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsLogisticsTargetDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as logistics target per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UseAsStockpileDefault" type="xs:string" default="True"  >
							<xs:annotation><xs:documentation>
								Set use as stockpile per default. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WarningFlagPosition" type="xs:string" default="(-1.5, 0.0, -1.5)"  >
							<xs:annotation><xs:documentation>
								Position where the warning flag is placed [UnityEngine.Vector3, default: (-1.5, 0.0, -1.5)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZoneInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Zone info (only used internally).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					<xs:choice maxOccurs="unbounded" minOccurs="0">
						<xs:element name="DefinedFields" type="xs:string"  >
							<xs:annotation><xs:documentation>
								Fields defined by object (internal only). [System.Collections.Generic.List`1[System.Reflection.FieldInfo], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:choice>
		</xs:sequence>
	</xs:complexType>
</xs:element>
</xs:schema>
